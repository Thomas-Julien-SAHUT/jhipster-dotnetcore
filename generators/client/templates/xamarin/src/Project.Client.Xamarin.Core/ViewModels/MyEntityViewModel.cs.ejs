<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading.Tasks;
using Akavache;
using <%= namespace %>.Client.Xamarin.Core.Models;
using <%= namespace %>.Client.Xamarin.Core.Services;
using MvvmCross.Commands;
using MvvmCross.Navigation;
using MvvmCross.ViewModels;

namespace <%= namespace %>.Client.Xamarin.Core.ViewModels
{
    public class MyEntityViewModel : MvxViewModel
    {
        private readonly IAbstractEntityService<AbstractEntityModel> _myEntityService;
        private readonly IMvxNavigationService _navigationService;

        private int _age;
        private AbstractEntityModel _currentElement;
        private List<AbstractEntityModel> _listElement;
        private string _name;

        public IMvxCommand AddCommand => new MvxAsyncCommand(AddCommandClicked);
        public IMvxCommand RemoveCommand => new MvxAsyncCommand(RemoveCommandClicked);
        public IMvxCommand EditCommand => new MvxAsyncCommand(EditCommandClicked);

        public List<AbstractEntityModel> ListElement
        {
            get => _listElement;
            set
            {
                _listElement = value;
                RaisePropertyChanged(() => ListElement);
            }
        }

        public AbstractEntityModel CurrentElement
        {
            get => _currentElement;
            set
            {
                _currentElement = value;
                if (_currentElement != null)
                {
                    Name = _currentElement.Name;
                    Age = _currentElement.Age;
                }

                RaisePropertyChanged(() => CurrentElement);
            }
        }

        public string Name
        {
            get => _name;
            set
            {
                _name = value;
                RaisePropertyChanged(() => Name);
            }
        }

        public int Age
        {
            get => _age;
            set
            {
                _age = value;
                RaisePropertyChanged(() => Age);
            }
        }

        public MyEntityViewModel(IMvxNavigationService navigationService, IAbstractEntityService<AbstractEntityModel> myEntityService)
        {
            _navigationService = navigationService;
            _myEntityService = myEntityService;
        }

        public async Task AddCommandClicked()
        {
            var entity = new AbstractEntityModel
            {
                Id = null,
                Name = Name,
                Age = Age
            };

            await _myEntityService.CreateEntity(entity);
            await RefreshList();
        }

        public async Task RemoveCommandClicked()
        {
            if (CurrentElement.Id.HasValue)
            {
                await _myEntityService.DeleteEntity(CurrentElement.Id.Value);
                await RefreshList();
            }  // TODO: Handle errors
        }

        public async Task EditCommandClicked()
        {
            CurrentElement.Age = Age;
            CurrentElement.Name = Name;
            await _myEntityService.UpdateEntity(CurrentElement);
            await RefreshList();
        }

        public async Task RefreshList()
        {
            ListElement = await _myEntityService.GetEntities();
        }

        public override async Task Initialize()
        {
            await base.Initialize();
            await RefreshList();
        }
    }
}